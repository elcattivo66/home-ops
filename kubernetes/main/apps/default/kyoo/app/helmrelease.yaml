---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app kyoo
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.3.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      meilisearch:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: docker.io/getmeili/meilisearch
              tag: v1.8
            env:
              MEILI_ENV: production
              MEILI_NO_ANALYTICS: true
              MEILI_DB_PATH: /meili_data/data.ms
              MEILI_DUMP_DIR: /meili_data/dumps
              MEILI_MASTER_KEY:
                valueFrom:
                  secretKeyRef:
                    name: kyoo-secret
                    key: MEILI_MASTER_KEY
            resources:
              requests:
                cpu: 5m
                memory: 960Mi
              limits:
                memory: 1500Mi

      rabbitmq:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: docker.io/rabbitmq
              tag: 3-alpine
            envFrom: &envFrom
              - secretRef:
                  name: kyoo-secret
              - configMapRef:
                  name: kyoo-config
            resources:
              requests:
                cpu: 5m
                memory: 261Mi
              limits:
                memory: 261Mi

      back:
        replicas: 1
        strategy: Recreate
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          01-init-db:
            envFrom:
              - secretRef:
                  name: kyoo-secret
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16.3
          02-migrations:
            envFrom:
              - secretRef:
                  name: kyoo-secret
            image:
              repository: ghcr.io/zoriya/kyoo_migrations
              tag: edge@sha256:9359c039b593313e78e4c7e9efc45057e6a37e4f9117e8713af8917080ddf5df
        containers:
          app:
            image:
              repository: ghcr.io/zoriya/kyoo_back
              tag: edge@sha256:bcbb3b25b59da335168f2b7e1a906d35d9412ab5654d1086c325609bb795108f
            env:
              TRANSCODER_URL: http://kyoo-transcoder:7666
            envFrom: &envFrom
              - secretRef:
                  name: kyoo-secret
              - configMapRef:
                  name: kyoo-config
            resources:
              requests:
                cpu: 10m
                memory: 512Mi
              limits:
                cpu: 2000m
                memory: 4678Mi

      front:
        replicas: 1
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/zoriya/kyoo_front
              tag: edge@sha256:f2cc9fba7ec55a109111daf228aa4681b4014d625771efdb0c4bae2b8616cbfb
            env:
              KYOO_URL: http://kyoo-back:5000
            resources:
              requests:
                cpu: 5m
                memory: 100Mi
              limits:
                memory: 150Mi

      scanner:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: &scannerimage ghcr.io/zoriya/kyoo_scanner
              tag: &scannertag edge@sha256:1550990b5003753983c8899c47a81f1d0691b509732c3ed4001f92f5c58a4c82
            args: ["scanner"]
            envFrom: *envFrom
            resources:
              requests:
                cpu: 5m
                memory: 100Mi
              limits:
                memory: 100Mi

      matcher:
        replicas: 1
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: *scannerimage
              tag: *scannertag
            args: ["matcher"]
            envFrom: *envFrom
            resources:
              requests:
                cpu: 5m
                memory: 100Mi
              limits:
                memory: 100Mi

      autosync:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/zoriya/kyoo_autosync
              tag: 4.6.0@sha256:c3dc2d07e6f5ba44fe4bd29e65aea63c9f8969fae662b890ac8d44b97f212d6c
            envFrom: *envFrom
            resources:
              requests:
                cpu: 5m
                memory: 100Mi
              limits:
                memory: 100Mi

      transcoder:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/zoriya/kyoo_transcoder
              tag: edge@sha256:a316cd4d2ab3e6b3e30b1fff5ba6eccc93fc2bbe1932188e8794be89d28ee10e
            envFrom: *envFrom
            resources:
              requests:
                gpu.intel.com/i915: 1
                cpu: 10m
                memory: 512Mi
              limits:
                gpu.intel.com/i915: 1
                memory: 4Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [44, 105]
        seccompProfile: { type: RuntimeDefault }
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"

    service:
      back:
        controller: back
        ports:
          http:
            port: 5000
      front:
        controller: front
        ports:
          http:
            port: 8901
      rabbitmq:
        controller: rabbitmq
        ports:
          http:
            port: 5672
      meilisearch:
        controller: meilisearch
        ports:
          http:
            port: 7700
      transcoder:
        controller: transcoder
        ports:
          http:
            port: 7666

    ingress:
      main:
        className: internal
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            rewrite /api/(.*) /$1 break;
        hosts:
          - host: &host kyoo.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: front
                  port: http
              - path: /api
                pathType: Prefix
                service:
                  identifier: back
                  port: http
        tls:
          - hosts:
              - *host

    persistence:
      search:
        existingClaim: kyoo-meilisearch
        advancedMounts:
          meilisearch:
            app:
              - path: /meili_data
      transcoder-metadata:
        existingClaim: kyoo-transcoder-metadata
        advancedMounts:
          transcoder:
            app:
              - path: /metadata
      cache:
        type: emptyDir
        advancedMounts:
          transcoder:
            app:
              - path: /cache
      backend-metadata:
        existingClaim: kyoo-backend-metadata
        advancedMounts:
          back:
            app:
              - path: /metadata
      media:
        type: nfs
        server: nas.${SECRET_HOME_DOMAIN}
        path: /spool/media/
        globalMounts:
          - path: /media
            readOnly: true
