---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app kyoo
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      meilisearch:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: docker.io/getmeili/meilisearch
              tag: v1.8
            env:
              MEILI_ENV: production
              MEILI_NO_ANALYTICS: true
              MEILI_DB_PATH: /meili_data/data.ms
              MEILI_DUMP_DIR: /meili_data/dumps
              MEILI_MASTER_KEY:
                valueFrom:
                  secretKeyRef:
                    name: kyoo-secret
                    key: MEILI_MASTER_KEY
            resources:
              requests:
                cpu: 5m
              limits:
                memory: 2Gi

      rabbitmq:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: docker.io/rabbitmq
              tag: 3-alpine
            envFrom: &envFrom
              - secretRef:
                  name: kyoo-secret
              - configMapRef:
                  name: kyoo-config
            resources:
              requests:
                cpu: 5m
                memory: 300Mi
              limits:
                memory: 300Mi

      back:
        replicas: 1
        strategy: Recreate
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          01-init-db:
            envFrom:
              - secretRef:
                  name: kyoo-secret
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16.3
          02-migrations:
            envFrom:
              - secretRef:
                  name: kyoo-secret
            image:
              repository: ghcr.io/zoriya/kyoo_migrations
              tag: edge@sha256:29736c7a64b4e02a72a829f759ab735b6afa671b4621a8ed8bd30913d58be244
        containers:
          app:
            image:
              repository: ghcr.io/zoriya/kyoo_back
              tag: edge@sha256:814f6b0e12820aa07bde5bbd0ea8e2cf6a266d8b64fbf9a827fd09500d35439f
            env:
              TRANSCODER_URL: http://kyoo-transcoder:7666
            envFrom: &envFrom
              - secretRef:
                  name: kyoo-secret
              - configMapRef:
                  name: kyoo-config
            resources:
              requests:
                cpu: 10m
                memory: 512Mi
              limits:
                cpu: 2000m
                memory: 5Gi

      front:
        replicas: 1
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/zoriya/kyoo_front
              tag: edge@sha256:7d1eb7dfde9991774c26771cf00c17a08580a370e9fb3b19760c6e5fb2a3625f
            env:
              KYOO_URL: http://kyoo-back:5000
            resources:
              requests:
                cpu: 5m
                memory: 150Mi
              limits:
                memory: 150Mi

      scanner:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: &scannerimage ghcr.io/zoriya/kyoo_scanner
              tag: &scannertag edge@sha256:66e8b20871801fd865788f9bb9a255e1c5b9a232c1d21b0d0d835e90985f3867
            args: ["scanner"]
            envFrom: *envFrom
            resources:
              requests:
                cpu: 5m
                memory: 100Mi
              limits:
                memory: 100Mi

      matcher:
        replicas: 1
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: *scannerimage
              tag: *scannertag
            args: ["matcher"]
            envFrom: *envFrom
            resources:
              requests:
                cpu: 5m
                memory: 100Mi
              limits:
                memory: 100Mi

      autosync:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/zoriya/kyoo_autosync
              tag: 4.5.0@sha256:7c55dd5d0ae59ca0b5c6f324d6e188d626cb325ffc48f7ccecce193a6c09dc65
            envFrom: *envFrom
            resources:
              requests:
                cpu: 5m
                memory: 100Mi
              limits:
                memory: 100Mi

      transcoder:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/zoriya/kyoo_transcoder
              tag: edge@sha256:6905d0d487c51112d94efcce6a17763c150f89fb7697cb7e63400343ddd5602e
            envFrom: *envFrom
            resources:
              requests:
                gpu.intel.com/i915: 1
                cpu: 10m
                memory: 512Mi
              limits:
                gpu.intel.com/i915: 1
                memory: 4Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [44, 105]
        seccompProfile: { type: RuntimeDefault }
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"

    service:
      back:
        controller: back
        ports:
          http:
            port: 5000
      front:
        controller: front
        ports:
          http:
            port: 8901
      rabbitmq:
        controller: rabbitmq
        ports:
          http:
            port: 5672
      meilisearch:
        controller: meilisearch
        ports:
          http:
            port: 7700
      transcoder:
        controller: transcoder
        ports:
          http:
            port: 7666

    ingress:
      main:
        className: internal
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            rewrite /api/(.*) /$1 break;
          nignx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
        hosts:
          - host: &host kyoo.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: front
                  port: http
              - path: /api
                pathType: Prefix
                service:
                  identifier: back
                  port: http
        tls:
          - hosts:
              - *host

    persistence:
      search:
        existingClaim: kyoo-meilisearch
        advancedMounts:
          meilisearch:
            app:
              - path: /meili_data
      transcoder-metadata:
        existingClaim: kyoo-transcoder-metadata
        advancedMounts:
          transcoder:
            app:
              - path: /metadata
      cache:
        type: emptyDir
        advancedMounts:
          transcoder:
            app:
              - path: /cache
      backend-metadata:
        existingClaim: kyoo-backend-metadata
        advancedMounts:
          back:
            app:
              - path: /metadata
      media:
        type: nfs
        server: nas.${SECRET_HOME_DOMAIN}
        path: /tank/media/
        globalMounts:
          - path: /media
            readOnly: true
